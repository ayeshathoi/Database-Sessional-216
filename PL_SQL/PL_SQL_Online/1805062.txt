CREATE OR REPLACE FUNCTION DEPT_ASSIGNED_EMP(DEPT_ID IN NUMBER)
RETURN NUMBER IS
	ASSIGNED_NUM NUMBER;
BEGIN
	SELECT COUNT(*) INTO ASSIGNED_NUM
	FROM EMPLOYEE_DEPARTMENT
	WHERE DEPARTMENT_ID = DEPT_ID;
	RETURN ASSIGNED_NUM;
END;

CREATE OR REPLACE FUNCTION DEPT_LIMIT_EMP(DEPT_ID IN NUMBER)
RETURN NUMBER IS
	LIM_NUM NUMBER;
BEGIN
	SELECT LIMIT INTO LIM_NUM
	FROM LIMITS
	WHERE DEPARTMENT_ID = DEPT_ID;
	RETURN LIM_NUM;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN -1;
END;


CREATE OR REPLACE PROCEDURE ASSIGN_EMPLOYEE_DEPT(EID IN NUMBER) IS
BEGIN
	FOR R IN (SELECT DEPARTMENT_ID FROM OPTIONS WHERE EMPLOYEE_ID = EID ORDER BY CHOICE)
	LOOP
		IF DEPT_LIMIT_EMP(R.DEPARTMENT_ID) > DEPT_ASSIGNED_EMP(R.DEPARTMENT_ID) THEN
				INSERT INTO EMPLOYEE_DEPARTMENT VALUES(EID, R.DEPARTMENT_ID);
				EXIT;
		END IF;
	END LOOP;
END;

CREATE OR REPLACE TRIGGER UPDATE_SALARY
AFTER INSERT 
ON EMPLOYEE_DEPARTMENT
FOR EACH ROW
DECLARE
	CNT NUMBER;
	SLRY NUMBER;
BEGIN
	SELECT COUNT(*) INTO CNT
	FROM DEPARTMENT_SALARY 
	WHERE DEPARTMENT_ID = :NEW.DEPARTMENT_ID;
	
	SELECT SALARY INTO SLRY
	FROM EMPLOYEES 
	WHERE EMPLOYEE_ID = :NEW.EMPLOYEE_ID;
	
	IF CNT > 0 THEN
		UPDATE DEPARTMENT_SALARY SET TOTAL_SALARY = TOTAL_SALARY + SLRY
		WHERE DEPARTMENT_ID = :NEW.DEPARTMENT_ID;
	ELSE 
		INSERT INTO DEPARTMENT_SALARY VALUES(:NEW.DEPARTMENT_ID, SLRY);
	END IF;
END;


CREATE OR REPLACE PROCEDURE ASSIGN_ALL_EMP IS
BEGIN
	FOR R IN (SELECT EMPLOYEE_ID FROM EMPLOYEES ORDER BY HIRE_DATE)
	LOOP	
		ASSIGN_EMPLOYEE_DEPT(R.EMPLOYEE_ID);
	END LOOP;
END;	



BEGIN
	ASSIGN_ALL_EMP;
END;
